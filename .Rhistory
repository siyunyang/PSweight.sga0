# point estimate
res.cox <- coxph(formula,data = subdata, weights=subwt, robust=TRUE, method = "breslow" )
summary(res.cox)$coefficients
source(paste0(dir,"datagen.R"))
source(paste0(dir,"helper.R"))
source(paste0(dir,"RMST_sub.R"))
p_R <- PSweight_sub(ps.estimate =e.h_long[,2], zname='status',subgroup=subgroup,yname="time2",data=data_long,R=2, weight="IPW")
p_RATE <- do.call(rbind, summary(p_R)$estimates)[,1]
p_RATE
akm_rmst(time=data_long$time, status=data_long$event, group=facz, weight=wt, tau=365, alpha=.05,
#                      xaxismin=0, xaxismax=365)
xaxismin=0, xaxismax=365)
# --- RMST Using Adjusted KM ---
# Time is the time to event
# Status is 0 if censored, 1 if event
# Group should be a factor variable
# Weights can be obtained separately, ie through logistic models
# Tau is a user-specified truncation point.
# If not specified, the default will be the minimum of the each groups' last event time
akm_rmst <- function(time, status, group, weight=NULL, tau=NULL, alpha=.05,
xaxismin=0, xaxismax=max(time)){
if(sum(time<0)>0){print("Error: times must be positive.")
}else{
if(sum(weight<=0)>0){print("Error: weights must be greater than 0.")
}else{
if(sum(status!=0 & status!=1)>0){print("Error: status must be a vector of 0s and/or 1s.")
}else{
if(is.null(weight)){weight <- rep(1, length(time))}
data <- data.frame(time, status, group, weight)
data <- data[!is.na(data$group) & !is.na(data$time),]
data <- data[order(group),]
#--- If tau not specified, use minimum tau from all groups ---
j=length(unique(data$group))
if(is.null(tau)){
taui = rep(999, j)
for (i in (1:j)){
groupval <- (levels(data$group)[i])
dat_group <- data[which(data$group==(groupval)),]
taui[i] <- max(dat_group$time[dat_group$status==1])
}
tau <- min(taui)
}
#--- Calculate AKM RMST in each group ---
rmst <- rep(999, length(1:j))
groupval <- rep(999, length(1:j))
rmst_var <- rep(999, length(1:j))
rmst_se <- rep(999, length(1:j))
plot(NULL, xlim=c(xaxismin, xaxismax), ylim=c(0,1), xlab='Time',ylab='Adjusted Survival Probability')
title(main='Adjusted Kaplan-Meier')
for (i in 1:j){
groupval[i] <- (levels(data$group)[i])
dat_group <- data[which(data$group==(groupval[i])),]
#--- AKM ---
# Based on 'adjusted.KM' function from {IPWsurvival} package
# Author: F. Le Borgne and Y. Foucher
tj <- c(0,sort(unique(dat_group$time[dat_group$status==1])))
dj <- sapply(tj, function(x){sum(dat_group$weight[dat_group$time==x & dat_group$status==1])})
yj <- sapply(tj, function(x){sum(dat_group$weight[dat_group$time>=x])})
st <- cumprod(1-(dj/yj))
m <- sapply(tj, function(x){sum((dat_group$weight[dat_group$time>=x])^2)})
mj <- ((yj^2)/m)
#ft <- data.frame(time=tj, n_risk=yj, n_event=dj, survival=st, variable=i, m=mj)
ft <- data.frame(tj, yj, dj, st, i, mj)
#--- RMST ---
# Based on 'rmst1 function' from {survRM2} package
# Author: Hajime Uno, Lu Tian, Angel Cronin, Chakib Battioui, Miki Horiguchi
rtime <- ft$tj<=tau
tj_r <- sort(c(ft$tj[rtime],tau))
st_r <- ft$st[rtime]
yj_r <- ft$yj[rtime]
dj_r <- ft$dj[rtime]
time_diff <- diff(c(0, tj_r))
areas <- time_diff * c(1, st_r)
rmst[i] <- sum(areas)
#--- Variance ---
mj_r <- ft$mj[rtime]
var_r <- ifelse((yj_r-dj_r)==0, 0, dj_r /(mj_r *(yj_r - dj_r)))
#var_r <- ifelse((yj_r-dj_r)==0, 0, dj_r /(yj_r *(yj_r - dj_r)))
var_r <- c(var_r,0)
rmst_var[i] <- sum(cumsum(rev(areas[-1]))^2 * rev(var_r)[-1])
rmst_se[i] <- sqrt(rmst_var[i])
#--- Plot AKM ---
lines(ft$tj, ft$st,type="s", col=(i+2), lwd=2)
}
}
}
}
#--- Add legend and tau to plot ---
abline(v=tau, col=1, lty=3, lwd=2)
legend('bottomleft', paste("Group", groupval), lty=rep(1, j), lwd=rep(2, j), col=3:(j+2),
cex=.75, bty ="n", inset = c(0, 0))
#--- Compare RMST between groups and compile output---
results <- data.frame(groupval,rmst,rmst_var,rmst_se,tau)
pwc <- ((j^2)-j)/2   #number of pairwise comparisons
label_diff <- rep(999,(pwc))
rmst_diff <- rep(999,(pwc))
rmst_diff_se <- rep(999,(pwc))
rmst_diff_low <- rep(999,(pwc))
rmst_diff_upp <- rep(999,(pwc))
rmst_diff_pval <- rep(999,(pwc))
label_ratio <- rep(999,(pwc))
rmst_logratio <- rep(999,(pwc))
rmst_logratio_se <- rep(999,(pwc))
rmst_ratio <- rep(999,(pwc))
rmst_ratio_low <- rep(999,(pwc))
rmst_ratio_upp <- rep(999,(pwc))
rmst_logratio_pval <- rep(999,(pwc))
output_diff <- data.frame(label_diff,rmst_diff,rmst_diff_se,rmst_diff_low,rmst_diff_upp,rmst_diff_pval)
output_ratio <- data.frame(label_ratio,rmst_logratio,rmst_logratio_se,rmst_ratio,rmst_ratio_low,rmst_ratio_upp,rmst_logratio_pval)
l <- 1
for (i in 1:(j-1)){
for (j in (i+1):j){
# Based on 'rmst2 function' from {survRM2} package
# Author: Hajime Uno, Lu Tian, Angel Cronin, Chakib Battioui, Miki Horiguchi
#--- RMST Difference ---
output_diff[l,]$label_diff <- paste('Groups',results[j,]$groupval,'vs.',results[i,]$groupval,' ')
output_diff[l,]$rmst_diff <- (results[j,]$rmst - results[i,]$rmst)
output_diff[l,]$rmst_diff_se <- sqrt(results[j,]$rmst_var + results[i,]$rmst_var)
output_diff[l,]$rmst_diff_low <- output_diff[l,]$rmst_diff - qnorm(1-alpha/2)*output_diff[l,]$rmst_diff_se
output_diff[l,]$rmst_diff_upp <- output_diff[l,]$rmst_diff + qnorm(1-alpha/2)*output_diff[l,]$rmst_diff_se
output_diff[l,]$rmst_diff_pval <- 2*(1-pnorm(abs(output_diff[l,]$rmst_diff)/output_diff[l,]$rmst_diff_se))
#--- RMST Ratio ---
output_ratio[l,]$label_ratio <- paste('Groups',results[j,]$groupval,'vs.',results[i,]$groupval,' ')
output_ratio[l,]$rmst_logratio <- (log(results[j,]$rmst) - log(results[i,]$rmst))
output_ratio[l,]$rmst_logratio_se <- sqrt(results[j,]$rmst_var/(results[j,]$rmst^2) + results[i,]$rmst_var/(results[i,]$rmst^2))
output_ratio[l,]$rmst_ratio <- exp(output_ratio[l,]$rmst_logratio)
output_ratio[l,]$rmst_ratio_low <- exp(output_ratio[l,]$rmst_logratio - qnorm(1-alpha/2)*output_ratio[l,]$rmst_logratio_se)
output_ratio[l,]$rmst_ratio_upp <- exp(output_ratio[l,]$rmst_logratio + qnorm(1-alpha/2)*output_ratio[l,]$rmst_logratio_se)
output_ratio[l,]$rmst_logratio_pval <- 2*(1-pnorm(abs(output_ratio[l,]$rmst_logratio)/output_ratio[l,]$rmst_logratio_se))
l <- l+1 #move to next row
}
}
cat("\n\n\n")
cat(paste('RMST calculated up to tau =',round(results$tau[1],3)))
cat("\n\n\n")
cat ("Restricted Mean Survival Time (RMST) per Group \n\n")
colnames(results) <- c("Group", "RMST", "Var", "SE", "Tau")
rownames(results) <- c(paste("Group", results$Group,' '))
print(round(results[c(2,4)],3))
cat("\n\n")
cat ("Restricted Mean Survival Time (RMST) Differences \n\n")
colnames(output_diff) <- c("Groups", "Est.", "SE", "CIL", "CIU", "p")
rownames(output_diff) <- c(output_diff$Groups)
print(round(output_diff[c(2,3,4,5,6)],3))
cat("\n\n")
cat ("Restricted Mean Survival Time (RMST) Ratios \n\n")
colnames(output_ratio) <- c("Groups", "Log Est.", "SE", "Est.", "CIL", "CIU", "p")
rownames(output_ratio) <- c(output_ratio$Groups)
print(round(output_ratio[c(2,3,4,5,6,7)],3))
}
akm_rmst(time=data_long$time, status=data_long$event, group=facz, weight=wt, tau=365, alpha=.05,
xaxismin=0, xaxismax=365)
# true overall KM plots - IPW
ftilt<-tiltbin(weight = "IPW")
#evaluated tilting function
tilt.h<-ftilt(c(e.h_long[,trt]))
allwt<-(1/e.h_long)*tilt.h
wt<-rep(0,2*n)
for(i in 1:ncate){
wt[znum_long==i]<-allwt[znum_long==i,i]
}
akm_rmst(time=data_long$time, status=data_long$event, group=facz, weight=wt, tau=365, alpha=.05,
xaxismin=0, xaxismax=365)
ftilt<-tiltbin(weight = "IPW")
#evaluated tilting function
tilt.h<-ftilt(c(e.h_long[,trt]))
allwt<-(1/e.h_long)*tilt.h
wt<-rep(0,2*n)
for(i in 1:ncate){
wt[znum_long==i]<-allwt[znum_long==i,i]
}
p_RA <- PSweight_sub(ps.estimate =e.h_long[,2], zname='status', subgroup=subgroup, yname="time2", data=data_long, R=2, weight="overlap")
p_RATO <- do.call(rbind, summary(p_RA)$estimates)[,1]
p_R <- PSweight_sub(ps.estimate =e.h_long[,2], zname='status',subgroup=subgroup,yname="time2",data=data_long,R=2, weight="IPW")
p_RATE <- do.call(rbind, summary(p_R)$estimates)[,1]
p_RATE
akm_rmst(time=data_long$time, status=data_long$event, group=facz, weight=wt, tau=365, alpha=.05,
xaxismin=0, xaxismax=365)
ipw_long <- wt*z_long/sum(wt*z_long)+ wt*(1-z_long)/sum(wt*(1-z_long))
akm_rmst(time=data_long$time, status=data_long$event, group=facz, weight=ipw_long, tau=365, alpha=.05,
xaxismin=0, xaxismax=365)
p_RATE
p_RATE <- do.call(rbind, summary(p_R)$estimates)[,1]
p_RATE
head(data_long)
akm_rmst(time=data_long$time[data_long$S1==1], status=data_long$event[data_long$S1==1], group=facz[data_long$S1==1], weight=wt[data_long$S1==1], tau=365, alpha=.05,
xaxismin=0, xaxismax=365)
p_RATE
akm_rmst(time=data_long$time[data_long$S1==0], status=data_long$event[data_long$S1==0], group=facz[data_long$S1==0], weight=wt[data_long$S1==0], tau=365, alpha=.05,
xaxismin=0, xaxismax=365)
p_RATE
sample_data <- data1[sample(1:dim(data1)[1], size= 3000 ),c(-1:-4)]
S = sample_data[,subgroup]
X = as.matrix(select(sample_data, X1:X10) )
Z = sample_data[,"Z"]
main.eh <- PSmethod_sub(ps.formula=main.form, subgroup=NULL, method="glm", data=sample_data)
# gbm
gbm.eh <- PSmethod_sub(ps.formula=main.form, subgroup=NULL, method="gbm",n.trees=5000,interaction.depth = 2,shrinkage=0.01,
perm.test.iters=0, data=sample_data)
# rfs
rf.eh <- PSmethod_sub(ps.formula=main.form,data=sample_data, subgroup=NULL, method="RFs", num.trees = 1000, replace = T, num.threads =10,
seed = 1234 )
# plasso
# full interaction ps model
# full.form <- main.form
# for (j in 1: dim(S)[2])
#   for (k in 1:dim(X)[2]){
#   full.form = paste(full.form,paste("X",k,"*S",j,sep=""),sep="+")
# }
# ps.form_f = paste("Z~",paste(paste("X",1:10,sep="", collapse="+"),paste("S",1:4,sep="", collapse="+"),sep="+"))
# cov <- paste("X",1:10,sep="")
# for(i in 1:length(subgroup)){
#   for (j in 1:length(cov)){
#     ps.form_f=paste(ps.form_f, paste(subgroup[i],"*",cov[j]), sep=" + ")
#   }
# }
lasso.eh <- PSmethod_sub(ps.formula=full.form, subgroup=NULL, method="pLASSO", data=sample_data)
sample_formula =Surv(Y, Delta ) ~ Z
shr_ipw <- smhr(formula=sample_formula, ps=main.eh, mweight="IPW",data= sample_data, subgroup)
shr_ipw
shr_ipw.cox
res.cox
formula
shr_ipw.cox <- smhr(formula, ps=e.h_long,mweight="IPW",data= data_long, subgroup)
formula =Surv(time, event) ~ status
shr_ipw.cox <- smhr(formula, ps=e.h_long,mweight="IPW",data= data_long, subgroup)
shr_ipw.cox
sample_formula =Surv(Y, Delta ) ~ Z
shr_ipw <- smhr(formula=sample_formula, ps=main.eh, mweight="IPW",data= sample_data, subgroup)
shr_ipw
# 4- estimated S-HR - OW pLASSO
shr_ow <- smhr(formula=sample_formula,ps=lasso.eh,mweight="overlap", data=sample_data, subgroup)
shr_ow
head(data_long$status)
tail(data_long$status)
# true S-HR - IPW
formula =Surv(time, event) ~ status
coxph(formula, data = data_long)
formula
zname <- all.vars(formula)[3]
Z = as.matrix(data[,zname]) #treatment
#set ordered group
facz<-as.factor(Z)
ncate<-nlevels(facz)
#set the treatment label
dic<-levels(facz)
znum<-as.numeric(facz) #numeric z
z<-znum -1 #z to fit the model
# tilting function
trt <- 2
ftilt<-tiltbin(weight = mweight)
#evaluated tilting function
tilt.h <- ftilt(c(ps[,trt]))
allwt<-(1/ps)*tilt.h
n <- dim(data)[1]
wt<-rep(0,n)
for(i in 1:trt){
wt[znum==i]<-allwt[znum==i,i]
}
mweight
submatrix<-as.matrix(data[,subgroup,drop=FALSE])
submatrix_level<-NULL
level_name<-c()
sub_n<-c()
# matrix for subgroup
for(r in 1:ncol(submatrix)){
leveltmp <- sort(unique(submatrix[,r]))
sub_n<-c(sub_n,length(leveltmp))
for(g in leveltmp){
submatrix_level<-cbind(submatrix_level,c(submatrix[,r]==g)*1)
level_name<-c(level_name,paste0(colnames(submatrix)[r],"=",g))
}
}
colnames(submatrix_level)<-level_name
mu.est<-c()
g
subtmp<-c(submatrix_level[,g])
subdata <- data[subtmp==1, ]
#normalize weights within subgroup
wt_n <- wt*z*subtmp/sum(wt*z*subtmp)+ wt*(1-z)*subtmp/sum(wt*(1-z)*subtmp)
subwt <- wt_n[subtmp==1]
subdata$subwt <- subwt
# point estimate
res.cox <- coxph(formula,data = subdata, weights=subwt, robust=TRUE, method = "breslow" )
res.cox
View(subdata)
g=2
subtmp<-c(submatrix_level[,g])
subdata <- data[subtmp==1, ]
#normalize weights within subgroup
wt_n <- wt*z*subtmp/sum(wt*z*subtmp)+ wt*(1-z)*subtmp/sum(wt*(1-z)*subtmp)
subwt <- wt_n[subtmp==1]
subdata$subwt <- subwt
# point estimate
res.cox <- coxph(formula,data = subdata, weights=subwt, robust=TRUE, method = "breslow" )
res.cox
shr_ipw.cox
shr_ipw.cox <- smhr(formula, ps=e.h_long,mweight="IPW",data= data_long, subgroup)
shr_ipw.cox
formula
ps=e.h_long
mweight="IPW"
data= data_long
zname <- all.vars(formula)[3]
Z = as.matrix(data[,zname]) #treatment
#set ordered group
facz<-as.factor(Z)
ncate<-nlevels(facz)
#set the treatment label
dic<-levels(facz)
znum<-as.numeric(facz) #numeric z
z<-znum -1 #z to fit the model
# tilting function
trt <- 2
ftilt<-tiltbin(weight = mweight)
#evaluated tilting function
tilt.h <- ftilt(c(ps[,trt]))
allwt<-(1/ps)*tilt.h
n <- dim(data)[1]
wt<-rep(0,n)
for(i in 1:trt){
wt[znum==i]<-allwt[znum==i,i]
}
submatrix<-as.matrix(data[,subgroup,drop=FALSE])
submatrix_level<-NULL
level_name<-c()
sub_n<-c()
# matrix for subgroup
for(r in 1:ncol(submatrix)){
leveltmp <- sort(unique(submatrix[,r]))
sub_n<-c(sub_n,length(leveltmp))
for(g in leveltmp){
submatrix_level<-cbind(submatrix_level,c(submatrix[,r]==g)*1)
level_name<-c(level_name,paste0(colnames(submatrix)[r],"=",g))
}
}
colnames(submatrix_level)<-level_name
mu.est<-c()
for(g in 1:ncol(submatrix_level)){
subtmp<-c(submatrix_level[,g])
subdata <- data[subtmp==1, ]
#normalize weights within subgroup
wt_n <- wt*z*subtmp/sum(wt*z*subtmp)+ wt*(1-z)*subtmp/sum(wt*(1-z)*subtmp)
subwt <- wt_n[subtmp==1]
subdata$subwt <- subwt
# point estimate
res.cox <- coxph(formula,data = subdata, weights=subwt, robust=TRUE, method = "breslow" )
coef <- round(res.cox$coefficients ,2)
se <- round(summary(res.cox)$coefficients[4] ,2)
mu.est<-rbind(mu.est,c(coef, se))
}
rownames(mu.est)<-colnames(submatrix_level)
colnames(mu.est)<-c("coef", "se")
mu.est
g
res.cox
zname
# S-MHR
smhr <- function(formula, ps, mweight, data, subgroup)
{ formula <- as.formula(formula)
zname <- all.vars(formula)[3]
Z = as.matrix(data[,zname]) #treatment
#set ordered group
facz<-as.factor(Z)
ncate<-nlevels(facz)
#set the treatment label
dic<-levels(facz)
znum<-as.numeric(facz) #numeric z
z<-znum -1 #z to fit the model
# tilting function
trt <- 2
ftilt<-tiltbin(weight = mweight)
#evaluated tilting function
tilt.h <- ftilt(c(ps[,trt]))
allwt<-(1/ps)*tilt.h
n <- dim(data)[1]
wt<-rep(0,n)
for(i in 1:trt){
wt[znum==i]<-allwt[znum==i,i]
}
######## Prepare subgroup matrix for estimation#############################################################################
submatrix<-as.matrix(data[,subgroup,drop=FALSE])
submatrix_level<-NULL
level_name<-c()
sub_n<-c()
# matrix for subgroup
for(r in 1:ncol(submatrix)){
leveltmp <- sort(unique(submatrix[,r]))
sub_n<-c(sub_n,length(leveltmp))
for(g in leveltmp){
submatrix_level<-cbind(submatrix_level,c(submatrix[,r]==g)*1)
level_name<-c(level_name,paste0(colnames(submatrix)[r],"=",g))
}
}
colnames(submatrix_level)<-level_name
mu.est<-c()
for(g in 1:ncol(submatrix_level)){
subtmp<-c(submatrix_level[,g])
subdata <- data[subtmp==1, ]
#normalize weights within subgroup
wt_n <- wt*z*subtmp/sum(wt*z*subtmp)+ wt*(1-z)*subtmp/sum(wt*(1-z)*subtmp)
subwt <- wt_n[subtmp==1]
subdata$subwt <- subwt
# point estimate
res.cox <- coxph(formula,data = subdata, weights=subwt, robust=TRUE, method = "breslow" )
coef <- round(res.cox$coefficients ,2)
se <- round(summary(res.cox)$coefficients[4] ,2)
mu.est<-rbind(mu.est,c(coef, se))
}
rownames(mu.est)<-colnames(submatrix_level)
colnames(mu.est)<-c("coef", "se")
return(mu.est)
}
formula <- as.formula(formula)
formula
zname <- all.vars(formula)[3]
zname
# point estimate
res.cox <- coxph(formula,data = subdata, weights=subwt, robust=TRUE, method = "breslow" )
res.cox
View(subdata)
source("SumStat_sub.R")
source("print_Sumstat_sub.R")
source("Plot_SumStat_sub.R")
source('PSmethod_sub.R')
data <- read.csv("sample_data.csv")[,-1]
# pre-specify the confounder names: X1-X20
cov <- paste0('X',1:20)
# pre-specify subgroups by column index or column names
subg <- data[,c(2,3,4,20,21)]
subgroup<-paste0('X',c(1,2,3, 19,20))
# specify a main effect propensity score model
ps.form_m <- paste("Treatment~",paste0("X",1:20,collapse = "+"))
# or any arbitrary ps model
ps.form1 <- paste(ps.form_m,"+X1*X7+X1*X8+X2*X7")
# or a full interaction ps model
ps.form_f = ps.form_m
for(i in 1:length(subgroup)){
for (j in 1:length(cov)){
ps.form_f=paste(ps.form_f, paste(subgroup[i],"*",cov[j]), sep=" + ")
}
}
p <- SumStat_sub(ps.formula = ps.form_m, subgroup = subgroup, data=data, weight=c("overlap"))
x=p
varlist=NULL
base=FALSE
plotsub=FALSE
vif<-x$vif
ASD<-x$ASD
subgroup<-x$subgroup
if(base){
vif<-x$vif_bs
ASD<-x$ASD_bs
}
nsubg<-x$nsubg
VIFW <- round(vif,2)
if(!is.null(varlist)){
ASD<-ASD[varlist,]
}else{
ASD<-ASD[!grepl('\\:',rownames(ASD)),]
#print not subgroup as confounder
if(!plotsub){
namelist<-c()
for (i in subgroup){
namelist<-c(namelist,which(i==rownames(ASD)))
}
namelist<-unique(namelist)
ASD<-ASD[-namelist,]
}
}
nv<-length(colnames(ASD))
ncov<-length(rownames(ASD))
mydata <- data.frame(ASMD = c(ASD),
Subgroups = rep(colnames(ASD), each=nrow(ASD)),
VarName = rep(rownames(ASD), nv))
mydata$VarName <- factor(mydata$VarName, levels=unique(mydata$VarName))
mydata$Subgroups <- factor(mydata$Subgroups, levels=unique(mydata$Subgroups))
mydata$lcolor <- ifelse(mydata$ASMD <=0.1 |is.na(mydata$ASMD), "0",
ifelse((mydata$ASMD <=0.15), "1",
ifelse((mydata$$ASMD <=0.20), "2","3")))
mydata$lcolor <- ifelse(mydata$ASMD <=0.1 |is.na(mydata$ASMD), "0",
ifelse((mydata$ASMD <=0.15), "1",
ifelse((mydata$ASMD <=0.20), "2","3")))
toplot <- mydata
toplot$lcolor <- factor(toplot$lcolor, levels=c("0","1","2","3"))
group.colors <- c("0" = "White", "1" = "grey85", "2" ="grey50","3"="black")
ggplot(toplot, aes(x =VarName , y =Subgroups , fill=lcolor)) +
geom_dotplot(binaxis = "y",binwidth = 0.75, stackdir = "center")+labs(x="Covariate", y="Subgroup"  )+
scale_fill_manual(values=group.colors,name="ASMD",  labels=c("<0.1", "0.1-0.15", "0.15-0.20", ">0.20"), drop=FALSE)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))+
theme(axis.text.x = element_text( angle=-45,vjust = 0, hjust=0.3),axis.text = element_text( size = 14 ),
axis.title = element_text( size = 20, face = "bold" ),legend.position="bottom",legend.title = element_text(size=18),
legend.text=element_text(size=18), legend.key.size = unit(2,"line"))+
annotate("text", x = rep(ncov+1,nv), y = seq(1, nv,1), label = format(nsubg,zero.print = T),size = 5)+
annotate("text", rep(ncov+2,nv), y = seq(1, nv,1), label = format(VIFW,zero.print = T),size = 5)+
annotate("text", x = c(ncov+1,ncov+2), y = rep(nv+1,2), label = c("Size", "VIF"),size = 5)+
expand_limits(x= c(0, length(levels(toplot$VarName)) + 3),y= c(0, length(levels(toplot$Subgroups)) + 1.5) )
setwd("C:/Users/sy89/Dropbox/PSWeight.SGA/PSweight.SGA_pkg3")
library(devtools)
load_all()
check()
source('C:/Users/sy89/Dropbox/PSWeight.SGA/PSweight.SGA_pkg3/R/Plot_SumStat_sga.R')
check()
check()
check()
document()
check()
clean()
build()
file.exists("~/.ssh/id_rsa.pub")
data <- read.csv("sample_data.csv")[,-1]
